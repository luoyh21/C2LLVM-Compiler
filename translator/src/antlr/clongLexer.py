# Generated from clong.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61")
        buf.write("\u0133\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13")
        buf.write("\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3")
        buf.write("\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\31")
        buf.write("\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3")
        buf.write("#\3$\3$\3$\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3(\3(\3(\3)\3)\7)\u00ed\n)\f)\16)\u00f0\13)\3*")
        buf.write("\6*\u00f3\n*\r*\16*\u00f4\3+\6+\u00f8\n+\r+\16+\u00f9")
        buf.write("\3+\3+\6+\u00fe\n+\r+\16+\u00ff\3,\3,\3,\3,\3-\3-\7-\u0108")
        buf.write("\n-\f-\16-\u010b\13-\3-\3-\3.\3.\3.\3.\7.\u0113\n.\f.")
        buf.write("\16.\u0116\13.\3.\5.\u0119\n.\3.\3.\3.\3.\3/\3/\3/\3/")
        buf.write("\7/\u0123\n/\f/\16/\u0126\13/\3/\3/\3/\3/\3/\3\60\6\60")
        buf.write("\u012e\n\60\r\60\16\60\u012f\3\60\3\60\5\u0109\u0114\u0124")
        buf.write("\2\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27")
        buf.write("\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O)Q*S+U,W-Y.[/]\60_\61\3\2\6\5\2C\\aac|\6\2\62;C\\a")
        buf.write("ac|\3\2\62;\5\2\13\f\17\17\"\"\2\u013b\2\3\3\2\2\2\2\5")
        buf.write("\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2")
        buf.write("\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2")
        buf.write("\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2")
        buf.write("\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2")
        buf.write("\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2")
        buf.write("W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2")
        buf.write("\3a\3\2\2\2\5j\3\2\2\2\7l\3\2\2\2\tn\3\2\2\2\13r\3\2\2")
        buf.write("\2\rw\3\2\2\2\17|\3\2\2\2\21\177\3\2\2\2\23\u0081\3\2")
        buf.write("\2\2\25\u0083\3\2\2\2\27\u0085\3\2\2\2\31\u008c\3\2\2")
        buf.write("\2\33\u008e\3\2\2\2\35\u0090\3\2\2\2\37\u0092\3\2\2\2")
        buf.write("!\u0097\3\2\2\2#\u009e\3\2\2\2%\u00a5\3\2\2\2\'\u00a8")
        buf.write("\3\2\2\2)\u00ad\3\2\2\2+\u00b3\3\2\2\2-\u00b7\3\2\2\2")
        buf.write("/\u00b9\3\2\2\2\61\u00bb\3\2\2\2\63\u00bd\3\2\2\2\65\u00bf")
        buf.write("\3\2\2\2\67\u00c1\3\2\2\29\u00c3\3\2\2\2;\u00c5\3\2\2")
        buf.write("\2=\u00c7\3\2\2\2?\u00ca\3\2\2\2A\u00cd\3\2\2\2C\u00d0")
        buf.write("\3\2\2\2E\u00d3\3\2\2\2G\u00d6\3\2\2\2I\u00d9\3\2\2\2")
        buf.write("K\u00db\3\2\2\2M\u00e0\3\2\2\2O\u00e7\3\2\2\2Q\u00ea\3")
        buf.write("\2\2\2S\u00f2\3\2\2\2U\u00f7\3\2\2\2W\u0101\3\2\2\2Y\u0105")
        buf.write("\3\2\2\2[\u010e\3\2\2\2]\u011e\3\2\2\2_\u012d\3\2\2\2")
        buf.write("ab\7%\2\2bc\7k\2\2cd\7p\2\2de\7e\2\2ef\7n\2\2fg\7w\2\2")
        buf.write("gh\7f\2\2hi\7g\2\2i\4\3\2\2\2jk\7>\2\2k\6\3\2\2\2lm\7")
        buf.write("@\2\2m\b\3\2\2\2no\7k\2\2op\7p\2\2pq\7v\2\2q\n\3\2\2\2")
        buf.write("rs\7x\2\2st\7q\2\2tu\7k\2\2uv\7f\2\2v\f\3\2\2\2wx\7o\2")
        buf.write("\2xy\7c\2\2yz\7k\2\2z{\7p\2\2{\16\3\2\2\2|}\7*\2\2}~\7")
        buf.write("+\2\2~\20\3\2\2\2\177\u0080\7}\2\2\u0080\22\3\2\2\2\u0081")
        buf.write("\u0082\7\177\2\2\u0082\24\3\2\2\2\u0083\u0084\7=\2\2\u0084")
        buf.write("\26\3\2\2\2\u0085\u0086\7r\2\2\u0086\u0087\7t\2\2\u0087")
        buf.write("\u0088\7k\2\2\u0088\u0089\7p\2\2\u0089\u008a\7v\2\2\u008a")
        buf.write("\u008b\7h\2\2\u008b\30\3\2\2\2\u008c\u008d\7*\2\2\u008d")
        buf.write("\32\3\2\2\2\u008e\u008f\7.\2\2\u008f\34\3\2\2\2\u0090")
        buf.write("\u0091\7+\2\2\u0091\36\3\2\2\2\u0092\u0093\7i\2\2\u0093")
        buf.write("\u0094\7g\2\2\u0094\u0095\7v\2\2\u0095\u0096\7u\2\2\u0096")
        buf.write(" \3\2\2\2\u0097\u0098\7u\2\2\u0098\u0099\7v\2\2\u0099")
        buf.write("\u009a\7t\2\2\u009a\u009b\7n\2\2\u009b\u009c\7g\2\2\u009c")
        buf.write("\u009d\7p\2\2\u009d\"\3\2\2\2\u009e\u009f\7t\2\2\u009f")
        buf.write("\u00a0\7g\2\2\u00a0\u00a1\7v\2\2\u00a1\u00a2\7w\2\2\u00a2")
        buf.write("\u00a3\7t\2\2\u00a3\u00a4\7p\2\2\u00a4$\3\2\2\2\u00a5")
        buf.write("\u00a6\7k\2\2\u00a6\u00a7\7h\2\2\u00a7&\3\2\2\2\u00a8")
        buf.write("\u00a9\7g\2\2\u00a9\u00aa\7n\2\2\u00aa\u00ab\7u\2\2\u00ab")
        buf.write("\u00ac\7g\2\2\u00ac(\3\2\2\2\u00ad\u00ae\7y\2\2\u00ae")
        buf.write("\u00af\7j\2\2\u00af\u00b0\7k\2\2\u00b0\u00b1\7n\2\2\u00b1")
        buf.write("\u00b2\7g\2\2\u00b2*\3\2\2\2\u00b3\u00b4\7h\2\2\u00b4")
        buf.write("\u00b5\7q\2\2\u00b5\u00b6\7t\2\2\u00b6,\3\2\2\2\u00b7")
        buf.write("\u00b8\7?\2\2\u00b8.\3\2\2\2\u00b9\u00ba\7]\2\2\u00ba")
        buf.write("\60\3\2\2\2\u00bb\u00bc\7_\2\2\u00bc\62\3\2\2\2\u00bd")
        buf.write("\u00be\7/\2\2\u00be\64\3\2\2\2\u00bf\u00c0\7-\2\2\u00c0")
        buf.write("\66\3\2\2\2\u00c1\u00c2\7,\2\2\u00c28\3\2\2\2\u00c3\u00c4")
        buf.write("\7\61\2\2\u00c4:\3\2\2\2\u00c5\u00c6\7\'\2\2\u00c6<\3")
        buf.write("\2\2\2\u00c7\u00c8\7@\2\2\u00c8\u00c9\7?\2\2\u00c9>\3")
        buf.write("\2\2\2\u00ca\u00cb\7>\2\2\u00cb\u00cc\7?\2\2\u00cc@\3")
        buf.write("\2\2\2\u00cd\u00ce\7?\2\2\u00ce\u00cf\7?\2\2\u00cfB\3")
        buf.write("\2\2\2\u00d0\u00d1\7#\2\2\u00d1\u00d2\7?\2\2\u00d2D\3")
        buf.write("\2\2\2\u00d3\u00d4\7(\2\2\u00d4\u00d5\7(\2\2\u00d5F\3")
        buf.write("\2\2\2\u00d6\u00d7\7~\2\2\u00d7\u00d8\7~\2\2\u00d8H\3")
        buf.write("\2\2\2\u00d9\u00da\7#\2\2\u00daJ\3\2\2\2\u00db\u00dc\7")
        buf.write("e\2\2\u00dc\u00dd\7j\2\2\u00dd\u00de\7c\2\2\u00de\u00df")
        buf.write("\7t\2\2\u00dfL\3\2\2\2\u00e0\u00e1\7f\2\2\u00e1\u00e2")
        buf.write("\7q\2\2\u00e2\u00e3\7w\2\2\u00e3\u00e4\7d\2\2\u00e4\u00e5")
        buf.write("\7n\2\2\u00e5\u00e6\7g\2\2\u00e6N\3\2\2\2\u00e7\u00e8")
        buf.write("\7\60\2\2\u00e8\u00e9\7j\2\2\u00e9P\3\2\2\2\u00ea\u00ee")
        buf.write("\t\2\2\2\u00eb\u00ed\t\3\2\2\u00ec\u00eb\3\2\2\2\u00ed")
        buf.write("\u00f0\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef\3\2\2\2")
        buf.write("\u00efR\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f1\u00f3\t\4\2")
        buf.write("\2\u00f2\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f2")
        buf.write("\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5T\3\2\2\2\u00f6\u00f8")
        buf.write("\t\4\2\2\u00f7\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9")
        buf.write("\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fb\3\2\2\2")
        buf.write("\u00fb\u00fd\7\60\2\2\u00fc\u00fe\t\4\2\2\u00fd\u00fc")
        buf.write("\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u00fd\3\2\2\2\u00ff")
        buf.write("\u0100\3\2\2\2\u0100V\3\2\2\2\u0101\u0102\7)\2\2\u0102")
        buf.write("\u0103\13\2\2\2\u0103\u0104\7)\2\2\u0104X\3\2\2\2\u0105")
        buf.write("\u0109\7$\2\2\u0106\u0108\13\2\2\2\u0107\u0106\3\2\2\2")
        buf.write("\u0108\u010b\3\2\2\2\u0109\u010a\3\2\2\2\u0109\u0107\3")
        buf.write("\2\2\2\u010a\u010c\3\2\2\2\u010b\u0109\3\2\2\2\u010c\u010d")
        buf.write("\7$\2\2\u010dZ\3\2\2\2\u010e\u010f\7\61\2\2\u010f\u0110")
        buf.write("\7\61\2\2\u0110\u0114\3\2\2\2\u0111\u0113\13\2\2\2\u0112")
        buf.write("\u0111\3\2\2\2\u0113\u0116\3\2\2\2\u0114\u0115\3\2\2\2")
        buf.write("\u0114\u0112\3\2\2\2\u0115\u0118\3\2\2\2\u0116\u0114\3")
        buf.write("\2\2\2\u0117\u0119\7\17\2\2\u0118\u0117\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011b\7\f\2\2")
        buf.write("\u011b\u011c\3\2\2\2\u011c\u011d\b.\2\2\u011d\\\3\2\2")
        buf.write("\2\u011e\u011f\7\61\2\2\u011f\u0120\7,\2\2\u0120\u0124")
        buf.write("\3\2\2\2\u0121\u0123\13\2\2\2\u0122\u0121\3\2\2\2\u0123")
        buf.write("\u0126\3\2\2\2\u0124\u0125\3\2\2\2\u0124\u0122\3\2\2\2")
        buf.write("\u0125\u0127\3\2\2\2\u0126\u0124\3\2\2\2\u0127\u0128\7")
        buf.write(",\2\2\u0128\u0129\7\61\2\2\u0129\u012a\3\2\2\2\u012a\u012b")
        buf.write("\b/\2\2\u012b^\3\2\2\2\u012c\u012e\t\5\2\2\u012d\u012c")
        buf.write("\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u012d\3\2\2\2\u012f")
        buf.write("\u0130\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\b\60\2")
        buf.write("\2\u0132`\3\2\2\2\f\2\u00ee\u00f4\u00f9\u00ff\u0109\u0114")
        buf.write("\u0118\u0124\u012f\3\b\2\2")
        return buf.getvalue()


class clongLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    PAR = 40
    INT = 41
    DOUBLE = 42
    CHAR = 43
    STRING = 44
    LineComment = 45
    BlockComment = 46
    DELIMITER = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'>'", "'int'", "'void'", "'main'", "'()'", 
            "'{'", "'}'", "';'", "'printf'", "'('", "','", "')'", "'gets'", 
            "'strlen'", "'return'", "'if'", "'else'", "'while'", "'for'", 
            "'='", "'['", "']'", "'-'", "'+'", "'*'", "'/'", "'%'", "'>='", 
            "'<='", "'=='", "'!='", "'&&'", "'||'", "'!'", "'char'", "'double'", 
            "'.h'" ]

    symbolicNames = [ "<INVALID>",
            "PAR", "INT", "DOUBLE", "CHAR", "STRING", "LineComment", "BlockComment", 
            "DELIMITER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "PAR", "INT", "DOUBLE", "CHAR", "STRING", "LineComment", 
                  "BlockComment", "DELIMITER" ]

    grammarFileName = "clong.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


